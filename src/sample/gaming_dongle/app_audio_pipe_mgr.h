#ifndef __APP_AUDIO_PIPE_MGR_H__
#define __APP_AUDIO_PIPE_MGR_H__

#include "audio_pipe.h"
#include "app_gaming_sync.h"

#define PCM_16K_16BIT_MONO_10MS_FRAME_SIZE         640

#define PCM_48K_16BIT_STEREO_0_5MS_FRAME_SIZE      96
#define PCM_48K_16BIT_STEREO_1MS_FRAME_SIZE        192
#define PCM_48K_16BIT_STEREO_2MS_FRAME_SIZE        384
#define PCM_48K_16BIT_STEREO_2_66MS_FRAME_SIZE     512
#define PCM_48K_16BIT_STEREO_4MS_FRAME_SIZE        768
#define PCM_48K_16BIT_STEREO_5MS_FRAME_SIZE        960
#define PCM_48K_16BIT_STEREO_7_5MS_FRAME_SIZE      1440
#define PCM_48K_16BIT_STEREO_8MS_FRAME_SIZE        1536
#define PCM_48K_16BIT_STEREO_10MS_FRAME_SIZE       1920

#define PCM_48K_16BIT_MONO_0_5MS_FRAME_SIZE        (PCM_48K_16BIT_STEREO_0_5MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_1MS_FRAME_SIZE          (PCM_48K_16BIT_STEREO_1MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_2MS_FRAME_SIZE          (PCM_48K_16BIT_STEREO_2MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_2_66MS_FRAME_SIZE       (PCM_48K_16BIT_STEREO_2_66MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_4MS_FRAME_SIZE          (PCM_48K_16BIT_STEREO_4MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_5MS_FRAME_SIZE          (PCM_48K_16BIT_STEREO_5MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_7_5MS_FRAME_SIZE        (PCM_48K_16BIT_STEREO_7_5MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_8MS_FRAME_SIZE          (PCM_48K_16BIT_STEREO_8MS_FRAME_SIZE / 2)
#define PCM_48K_16BIT_MONO_10MS_FRAME_SIZE         (PCM_48K_16BIT_STEREO_10MS_FRAME_SIZE / 2)

#define PCM_48K_24BIT_STEREO_0_5MS_FRAME_SIZE      144
#define PCM_48K_24BIT_STEREO_1MS_FRAME_SIZE        288
#define PCM_48K_24BIT_STEREO_2MS_FRAME_SIZE        576
#define PCM_48K_24BIT_STEREO_2_66MS_FRAME_SIZE     768
#define PCM_48K_24BIT_STEREO_5MS_FRAME_SIZE        1440
#define PCM_48K_24BIT_STEREO_7_5MS_FRAME_SIZE      2160
#define PCM_48K_24BIT_STEREO_10MS_FRAME_SIZE       2880
#define PCM_96K_24BIT_STEREO_1MS_FRAME_SIZE        576
#define PCM_96K_24BIT_STEREO_0_5MS_FRAME_SIZE      288

#define PCM_48K_24BIT_MONO_0_5MS_FRAME_SIZE        (PCM_48K_24BIT_STEREO_0_5MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_1MS_FRAME_SIZE          (PCM_48K_24BIT_STEREO_1MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_2MS_FRAME_SIZE          (PCM_48K_24BIT_STEREO_2MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_2_66MS_FRAME_SIZE       (PCM_48K_24BIT_STEREO_2_66MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_5MS_FRAME_SIZE          (PCM_48K_24BIT_STEREO_5MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_7_5MS_FRAME_SIZE        (PCM_48K_24BIT_STEREO_7_5MS_FRAME_SIZE / 2)
#define PCM_48K_24BIT_MONO_10MS_FRAME_SIZE         (PCM_48K_24BIT_STEREO_10MS_FRAME_SIZE / 2)
#define PCM_96K_24BIT_MONO_1MS_FRAME_SIZE          (PCM_96K_24BIT_STEREO_1MS_FRAME_SIZE / 2)
#define PCM_96K_24BIT_MONO_0_5MS_FRAME_SIZE        (PCM_96K_24BIT_STEREO_0_5MS_FRAME_SIZE / 2)

typedef enum
{
    PIPE_STATE_RELEASED  = 0x00,
    PIPE_STATE_CREATING  = 0x01,
    PIPE_STATE_CREATED   = 0x02,
    PIPE_STATE_STARTING  = 0x03,
    PIPE_STATE_STARTED   = 0x04,
    PIPE_STATE_STOPPING  = 0x05,
    PIPE_STATE_STOPPED   = 0x06,
    PIPE_STATE_RELEASING = 0x07,
    PIPE_STATE_MIXING    = 0x08,
    PIPE_STATE_DEMIXING  = 0x09,
} T_APP_PIPE_STATE;

typedef enum
{
    PIPE_EVENT_NONE      = 0x00,
    PIPE_EVENT_CREATE    = 0x01,
    PIPE_EVENT_CREATED   = 0x02,
    PIPE_EVENT_START     = 0x03,
    PIPE_EVENT_STARTED   = 0x04,
    PIPE_EVENT_RELEASE   = 0x05,
    PIPE_EVENT_RELEASED  = 0x06,
    PIPE_EVENT_MIXED     = 0x07,
    PIPE_EVENT_DEMIXED   = 0x08,
    PIPE_EVENT_FILLED    = 0x09,
} T_APP_PIPE_EVENT;

typedef enum
{
    AUDIO_PIPE_DOWNSTREAM_UAC1,
    AUDIO_PIPE_DOWNSTREAM_UAC2,
    AUDIO_PIPE_UPSTREAM,
    AUDIO_PIPE_MAX_NUM,
} T_APP_AUDIO_PIPE_TYPE;

typedef bool (*T_APP_PIPE_DATA_CBACK)(uint8_t *data, uint16_t len);
typedef void (*T_APP_PIPE_EVENT_CBACK)(T_APP_PIPE_EVENT event);

typedef struct
{
    bool                   handle_data_in_isr;
    bool                   asrc_toggle;
    bool                   is_mixed_pipe;
    T_GAMING_CODEC         src_codec;
    T_GAMING_CODEC         snk_codec;
    T_APP_PIPE_DATA_CBACK  data_cback;
    T_APP_PIPE_EVENT_CBACK event_cback;
    T_AUDIO_STREAM_MODE    mode;
} T_APP_PIPE_PARAM;

typedef struct
{
    T_AUDIO_FORMAT_INFO    src_info;
    T_AUDIO_FORMAT_INFO    snk_info;
} T_PIPE_FORMAT_INFO;

uint16_t app_pipe_get_codec_frame_size(T_GAMING_CODEC codec_type);
int32_t app_pipe_get_asrc_ratio(T_APP_AUDIO_PIPE_TYPE type);
bool app_pipe_asrc_set(T_APP_AUDIO_PIPE_TYPE type, int32_t ratio);
bool app_pipe_gain_set(T_APP_AUDIO_PIPE_TYPE type, uint16_t gain);
bool app_pipe_is_ready(T_APP_AUDIO_PIPE_TYPE type);
bool app_pipe_fill_in_isr(T_APP_AUDIO_PIPE_TYPE type, void *buf, uint16_t len);
bool app_pipe_fill(T_APP_AUDIO_PIPE_TYPE type, void *buf, uint16_t len);
void app_pipe_create(T_APP_AUDIO_PIPE_TYPE type, T_APP_PIPE_PARAM *param);
void app_pipe_release(T_APP_AUDIO_PIPE_TYPE type);
void app_pipe_init(void);

#endif
